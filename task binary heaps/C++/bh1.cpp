//Задача 1: Поиск минимального элемента в бинарной куче 
#include <iostream>
#include <queue>
#include <vector>

using namespace std;

int main() {
    
    // Создаем min-heap (минимальную кучу)
    // priority_queue - контейнер, который автоматически поддерживает порядок кучи
    // vector<int> - внутренний контейнер для хранения элементов
    // greater<int> - компаратор, который делает кучу минимальной (min-heap)
    // По умолчанию priority_queue создает max-heap, поэтому нужен greater<int>
    priority_queue<int, vector<int>, greater<int>> minHeap;
    
    // Добавляем элементы в кучу
    // Порядок добавления: 5, 2, 8, 1, 3
    // Куча автоматически перестраивается после каждого добавления
    minHeap.push(5);  // Куча: [5]
    minHeap.push(2);  // Куча: [2, 5] - 2 становится корнем
    minHeap.push(8);  // Куча: [2, 5, 8]
    minHeap.push(1);  // Куча: [1, 2, 8, 5] - 1 становится корнем
    minHeap.push(3);  // Куча: [1, 2, 3, 5, 8]
    
    // Получаем минимальный элемент (не извлекая его из кучи)
    // Метод top() возвращает элемент на вершине кучи (корень)
    // В min-heap это всегда минимальный элемент
    cout << "Минимальный элемент: " << minHeap.top() << endl;
    
    // Показываем, что после просмотра размер кучи не изменился
    // Элемент остался в куче, мы только посмотрели на него
    cout << "Размер кучи после просмотра: " << minHeap.size() << endl;

    return 0;
}
    
