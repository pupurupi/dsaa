//Условие: Создайте min-heap из нескольких элементов и напишите функцию, которая возвращает минимальный элемент, не извлекая его.
import java.util.PriorityQueue;

public class Main1 {
    public static void main(String[] args) {
        
        // Создаем min-heap (минимальную кучу)
        // PriorityQueue в Java по умолчанию создает min-heap
        // Элементы автоматически упорядочиваются так, что минимальный всегда наверху
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        
        // Добавляем элементы в кучу
        // Порядок добавления: 5, 2, 8, 1, 3
        // Куча автоматически перестраивается после каждого добавления
        minHeap.add(5);  // Куча: [5]
        minHeap.add(2);  // Куча: [2, 5] - 2 становится корнем
        minHeap.add(8);  // Куча: [2, 5, 8]
        minHeap.add(1);  // Куча: [1, 2, 8, 5] - 1 становится корнем
        minHeap.add(3);  // Куча: [1, 2, 3, 5, 8]
        
        // Получаем минимальный элемент (не извлекая его из кучи)
        // Метод peek() возвращает элемент на вершине кучи (корень)
        // В min-heap это всегда минимальный элемент
        // peek() только смотрит на элемент, но не удаляет его
        System.out.println("Минимальный элемент: " + minHeap.peek());
        
        // Показываем, что после peek размер кучи не изменился
        // Элемент остался в куче, мы только посмотрели на него
        System.out.println("Размер кучи после peek: " + minHeap.size());
        System.out.println("Элемент остался в куче, мы его не удалили");
    }
}
