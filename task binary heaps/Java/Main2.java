//Условие: Дан массив целых чисел и число k. Найдите k наименьших элементов из массива.
import java.util.PriorityQueue;

public class Main2 {
    public static void main(String[] args) {
        
        // Исходный неотсортированный массив
        int[] arr = {7, 2, 9, 1, 5, 8, 3};
        int k = 3;  // Количество наименьших элементов, которые нужно найти
        
        // Выводим исходный массив для наглядности
        System.out.print("Исходный массив: ");
        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
        
        // Создаем min-heap из всех элементов массива
        // PriorityQueue в Java по умолчанию создает min-heap
        // Это эффективный способ найти k наименьших элементов
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        
        // Добавляем все элементы массива в min-heap
        // После этого минимальный элемент всегда будет на вершине
        for (int num : arr) {
            minHeap.add(num);
        }
        
        // Теперь куча выглядит так: [1, 2, 3, 5, 7, 8, 9]
        // Корень (minHeap.peek()) = 1 (минимальный элемент)
        
        // Извлекаем k наименьших элементов из кучи
        // Поскольку это min-heap, при каждом извлечении мы получаем текущий минимальный элемент
        System.out.print(k + " наименьших элемента: ");
        for (int i = 0; i < k; i++) {
            // poll() возвращает текущий минимальный элемент И удаляет его из кучи
            // После удаления следующий минимальный автоматически становится корнем
            int smallest = minHeap.poll();  // Получаем и удаляем минимальный
            System.out.print(smallest + " "); // Печатаем его
        }
        System.out.println();
        
        // После выполнения в куче остались элементы: [5, 7, 8, 9]
        // Мы извлекли три наименьших: 1, 2, 3
        
    }
}